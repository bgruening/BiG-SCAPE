"""Contains a description of a bgc pair to pass to distance calculation and networking
"""

# from python
from __future__ import annotations
from itertools import combinations
from math import factorial
from typing import Iterator

# from dependencies
# from other modules
from src.genbank import BGCRecord

# from this module


class BGCBin:
    """Contains a list of many-to-many BGC pairs and methods to manipulate the bin"""

    def __init__(self, label: str):
        self.label = label
        self.source_regions: list[BGCRecord] = []

    def pairs(self) -> Iterator[BGCPair]:
        """Returns an iterator for BGC pairs in this bin

        Yields:
            Iterator[BGCPair]: Iterator for BGC pairs in this bin
        """
        for bgc_a, bgc_b in combinations(self.source_regions, 2):
            yield BGCPair(bgc_a, bgc_b)

    def add_bgcs(self, bgc_list: list[BGCRecord]):
        """Adds BGCs to this bin and creates a generator for the pairs

        Args:
            bgc_list (list[BGCRecord]): List of BGCs to add to this bin
        """
        self.source_regions.extend(bgc_list)

    def num_pairs(self) -> int:
        """Returns the number of pairs expected to be generated by the pairs iterator

        Returns:
            int: The number of pairs expected to be generated from the iterator
        """
        if len(self.source_regions) < 2:
            return 0
        # n! / 2 / (n - 2)!
        n = len(self.source_regions)
        return int(factorial(n) / 2 / factorial(n - 2))

    def __repr__(self) -> str:
        return (
            f"Bin '{self.label}': {self.num_pairs()} pairs from "
            f"{len(self.source_regions)} BGCs"
        )


class BGCPair:
    """Contains a pair of BGCs, which can be any type of BGCRecord"""

    def __init__(self, region_a: BGCRecord, region_b: BGCRecord):
        self.region_a = region_a
        self.region_b = region_b


def generate_mix(bgc_list: list[BGCRecord]) -> BGCBin:
    """Generate an all-vs-all bin of the supplied BGCs

    Args:
        bgc_list (list[BGCRecord]): BGCs to make into an all-vs-all bin

    Returns:
        BGCBin: The all-vs-all BGC bin
    """
    mix_bin = BGCBin("mix")

    mix_bin.add_bgcs(bgc_list)

    return mix_bin
